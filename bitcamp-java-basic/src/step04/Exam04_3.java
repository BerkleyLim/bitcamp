// 비트 이동 연산자 : <<, >>>, >>
package step04;

public class Exam04_3 {
    public static void main (String[] args) {
        int i = 0b0110_1001;        // 0110 1001 = 105
        System.out.println(i >>> 1); // 0011 0101 = 52
        System.out.println(i >>> 2); // 0001 1010 = 26
        System.out.println(i >>> 3); // 0000 1101 = 13
        System.out.println(i >>> 4); // 0000 0110 = 6
        // >>> 연산자를 사용하여 오른쪽으로 이동한다.
        // 왼쪽 쪽 빈자리는 무조건 0으로 채운다.
        // 그래서 양수일 때는 >> 연산자와 같은 결과가 나오지만,
        // 다음과 같이 음수일 때는 양수로 바뀌는 결과가 나옴
        
        // 음수의 경우
        i = 0b1111_1111_1111_1111_1111_1111_1010_1001;    // -87
        System.out.println(i >>> 1); 
        // 0111_1111_1111_1111_1111_1111_1101_0100 = 2147483604
        // => 왼쪽 빈자리는 0으로 채운다.
        //    즉 양수로 바뀐다.
        //    양수로 바뀌는 순간 엄청나게 큰 수가 된다.

        System.out.println(i >>> 2);
        // 0011_1111_1111_1111_1111_1111_1110_1010 = 1073741802
        System.out.println(i >>> 3);
        // 0001_1111_1111_1111_1111_1111_1111_0101 = 536870901
        System.out.println(i >>> 4); 
        // 0000_1111_1111_1111_1111_1111_1111_1010 = 268435450
    }
}

// 오른쪽 이동
// - 1비트 이동은 나누기 2 한 것과 같은 효과를 준다.
// - 소수점 이하는 짤리는 효과를 갖는다.