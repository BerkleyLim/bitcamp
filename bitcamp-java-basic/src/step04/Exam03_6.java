// 논리 연산자 : 조건문과 비트 연산
package step04;

public class Exam03_6 {
    public static void main (String[] args) {
        // &&, ++ 의 피연산자(operand)는 반드시 boolean 이어야 한다.
        // 그리고 계산 결과는 boolean이다.
        boolean r;
        //r = 10 && 20;   // 컴파일 오류!
        //r = 10 || 20;   // 컴파일 오류!

        // &, |, ^, ~(not) 의 피연산자는 정수이다.
        // 그리고 계산 결과도 정수이다.
        // r = 10 & 20; // 컴파일 오류!
        int r2 = 10 & 20; // OK
        //float r3 = 10.2f & 20.3f; // 컴파일 오류!!

    }
}
// 정리!
// => 도대체 비트 연산자는 어디에 쓰이는가?
//    - 이미지 및 영상 처리에 사용된다.
//    - 예) 마스킹, 오버레이 기법에 사용된다.
//    - 예) 색조 변경에 사용된다.

// 사진을 컴퓨터에 저장하려면 2진수화 시켜야 한다.
// 일단 사진을 점(픽셀; pixel)으로 바꾼다.
// 각 픽셀의 색상은 RGB의 값(빛의 삼원색)으로 표현한다.
// 즉 빨강, 파랑, 초록의 색 세기를 조정하여 다양한 색상을 표현하는 것이다.
// 보통 천연색을 표현하기 위해 RGB 각 색상을 8비트로 표현한다.
// 빨강의 빛의 세기 : 0 ~ 255 => 0000 0000 ~ 1111 1111
// 파랑의 빛의 세기 : 0 ~ 255 => 0000 0000 ~ 1111 1111
// 초록의 빛의 세기 : 0 ~ 255 => 0000 0000 ~ 1111 1111
// 이 3개의 값을 합쳐서 한 개의 픽셀 색상을 표현하는 것이다.
// 즉, 24비트(3byte)로 픽셀 색상을 표현하는 것이다.
// 삘강 색의 한 픽셀 : 1111 1111 0000 0000 0000 0000 = 0xFF0000
// 초록 색의 한 픽셀 : 0000 0000 1111 1111 0000 0000 = 0x00FF00
// 파랑 색의 한 픽셀 : 0000 0000 0000 0000 1111 1111 = 0x0000FF
// 노랑 색의 한 픽셀 : 1111 1111 1111 1111 0000 0000 = 0xFFFF00
//
// 비트 연산 활용 예2:
// => 화면을 좀 더 시원하게, 푸름스름하게 만들자.
// => 방법 : 파란색 계통을 강화하거나
//          빨강이나 초록을 약화시키면 된다.
// => 다음과 같이 한 개의 점이 있다.
//    10001100 10010010 10101100 (변경전 색)
//  & 11111011 11111101 11111111
// -----------------------------------
//    10001000 10010000 10101100 (변경한 색)
